# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime
import typing
import platform

# Used for default argument values
_DEFAULT = object()


class _UniffiRustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_int32),
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def alloc(size):
        return _rust_call(_UniffiLib.ffi_bindings_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return _rust_call(_UniffiLib.ffi_bindings_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return _rust_call(_UniffiLib.ffi_bindings_rustbuffer_free, self)

    def __str__(self):
        return "_UniffiRustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def alloc_with_builder(*args):
        """Context-manger to allocate a buffer using a _UniffiRustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = _UniffiRustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consume_with_stream(self):
        """Context-manager to consume a buffer using a _UniffiRustBufferStream.

        The _UniffiRustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = _UniffiRustBufferStream.from_rust_buffer(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer at end of consume_with_stream")
        finally:
            self.free()

    @contextlib.contextmanager
    def read_with_stream(self):
        """Context-manager to read a buffer using a _UniffiRustBufferStream.

        This is like consume_with_stream, but doesn't free the buffer afterwards.
        It should only be used with borrowed `_UniffiRustBuffer` data.
        """
        s = _UniffiRustBufferStream.from_rust_buffer(self)
        yield s
        if s.remaining() != 0:
            raise RuntimeError("junk data left in buffer at end of read_with_stream")

class _UniffiForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "_UniffiForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class _UniffiRustBufferStream:
    """
    Helper for structured reading of bytes from a _UniffiRustBuffer
    """

    def __init__(self, data, len):
        self.data = data
        self.len = len
        self.offset = 0

    @classmethod
    def from_rust_buffer(cls, buf):
        return cls(buf.data, buf.len)

    def remaining(self):
        return self.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        data = self.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def read_i8(self):
        return self._unpack_from(1, ">b")

    def read_u8(self):
        return self._unpack_from(1, ">B")

    def read_i16(self):
        return self._unpack_from(2, ">h")

    def read_u16(self):
        return self._unpack_from(2, ">H")

    def read_i32(self):
        return self._unpack_from(4, ">i")

    def read_u32(self):
        return self._unpack_from(4, ">I")

    def read_i64(self):
        return self._unpack_from(8, ">q")

    def read_u64(self):
        return self._unpack_from(8, ">Q")

    def read_float(self):
        v = self._unpack_from(4, ">f")
        return v

    def read_double(self):
        return self._unpack_from(8, ">d")

    def read_c_size_t(self):
        return self._unpack_from(ctypes.sizeof(ctypes.c_size_t) , "@N")

class _UniffiRustBufferBuilder:
    """
    Helper for structured writing of bytes into a _UniffiRustBuffer.
    """

    def __init__(self):
        self.rbuf = _UniffiRustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, num_bytes):
        if self.rbuf.len + num_bytes > self.rbuf.capacity:
            self.rbuf = _UniffiRustBuffer.reserve(self.rbuf, num_bytes)
        yield None
        self.rbuf.len += num_bytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write_i8(self, v):
        self._pack_into(1, ">b", v)

    def write_u8(self, v):
        self._pack_into(1, ">B", v)

    def write_i16(self, v):
        self._pack_into(2, ">h", v)

    def write_u16(self, v):
        self._pack_into(2, ">H", v)

    def write_i32(self, v):
        self._pack_into(4, ">i", v)

    def write_u32(self, v):
        self._pack_into(4, ">I", v)

    def write_i64(self, v):
        self._pack_into(8, ">q", v)

    def write_u64(self, v):
        self._pack_into(8, ">Q", v)

    def write_float(self, v):
        self._pack_into(4, ">f", v)

    def write_double(self, v):
        self._pack_into(8, ">d", v)

    def write_c_size_t(self, v):
        self._pack_into(ctypes.sizeof(ctypes.c_size_t) , "@N", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class _UniffiRustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", _UniffiRustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_PANIC = 2

    def __str__(self):
        if self.code == _UniffiRustCallStatus.CALL_SUCCESS:
            return "_UniffiRustCallStatus(CALL_SUCCESS)"
        elif self.code == _UniffiRustCallStatus.CALL_ERROR:
            return "_UniffiRustCallStatus(CALL_ERROR)"
        elif self.code == _UniffiRustCallStatus.CALL_PANIC:
            return "_UniffiRustCallStatus(CALL_PANIC)"
        else:
            return "_UniffiRustCallStatus(<invalid code>)"

def _rust_call(fn, *args):
    # Call a rust function
    return _rust_call_with_error(None, fn, *args)

def _rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the _UniffiConverter for the error class that corresponds to the result.
    call_status = _UniffiRustCallStatus(code=_UniffiRustCallStatus.CALL_SUCCESS, error_buf=_UniffiRustBuffer(0, 0, None))

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    _uniffi_check_call_status(error_ffi_converter, call_status)
    return result

def _uniffi_check_call_status(error_ffi_converter, call_status):
    if call_status.code == _UniffiRustCallStatus.CALL_SUCCESS:
        pass
    elif call_status.code == _UniffiRustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("_rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == _UniffiRustCallStatus.CALL_PANIC:
        # When the rust code sees a panic, it tries to construct a _UniffiRustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = _UniffiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid _UniffiRustCallStatus code: {}".format(
            call_status.code))

# A function pointer for a callback as defined by UniFFI.
# Rust definition `fn(handle: u64, method: u32, args: _UniffiRustBuffer, buf_ptr: *mut _UniffiRustBuffer) -> int`
_UNIFFI_FOREIGN_CALLBACK_T = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_ulonglong, ctypes.c_ulong, ctypes.POINTER(ctypes.c_char), ctypes.c_int, ctypes.POINTER(_UniffiRustBuffer))

# UniFFI future continuation
_UNIFFI_FUTURE_CONTINUATION_T = ctypes.CFUNCTYPE(None, ctypes.c_size_t, ctypes.c_int8)

class _UniffiPointerManagerCPython:
    """
    Manage giving out pointers to Python objects on CPython

    This class is used to generate opaque pointers that reference Python objects to pass to Rust.
    It assumes a CPython platform.  See _UniffiPointerManagerGeneral for the alternative.
    """

    def new_pointer(self, obj):
        """
        Get a pointer for an object as a ctypes.c_size_t instance

        Each call to new_pointer() must be balanced with exactly one call to release_pointer()

        This returns a ctypes.c_size_t.  This is always the same size as a pointer and can be
        interchanged with pointers for FFI function arguments and return values.
        """
        # IncRef the object since we're going to pass a pointer to Rust
        ctypes.pythonapi.Py_IncRef(ctypes.py_object(obj))
        # id() is the object address on CPython
        # (https://docs.python.org/3/library/functions.html#id)
        return id(obj)

    def release_pointer(self, address):
        py_obj = ctypes.cast(address, ctypes.py_object)
        obj = py_obj.value
        ctypes.pythonapi.Py_DecRef(py_obj)
        return obj

    def lookup(self, address):
        return ctypes.cast(address, ctypes.py_object).value

class _UniffiPointerManagerGeneral:
    """
    Manage giving out pointers to Python objects on non-CPython platforms

    This has the same API as _UniffiPointerManagerCPython, but doesn't assume we're running on
    CPython and is slightly slower.

    Instead of using real pointers, it maps integer values to objects and returns the keys as
    c_size_t values.
    """

    def __init__(self):
        self._map = {}
        self._lock = threading.Lock()
        self._current_handle = 0

    def new_pointer(self, obj):
        with self._lock:
            handle = self._current_handle
            self._current_handle += 1
            self._map[handle] = obj
        return handle

    def release_pointer(self, handle):
        with self._lock:
            return self._map.pop(handle)

    def lookup(self, handle):
        with self._lock:
            return self._map[handle]

# Pick an pointer manager implementation based on the platform
if platform.python_implementation() == 'CPython':
    _UniffiPointerManager = _UniffiPointerManagerCPython # type: ignore
else:
    _UniffiPointerManager = _UniffiPointerManagerGeneral # type: ignore
# Types conforming to `_UniffiConverterPrimitive` pass themselves directly over the FFI.
class _UniffiConverterPrimitive:
    @classmethod
    def check(cls, value):
        return value

    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return cls.lowerUnchecked(cls.check(value))

    @classmethod
    def lowerUnchecked(cls, value):
        return value

    @classmethod
    def write(cls, value, buf):
        cls.write_unchecked(cls.check(value), buf)

class _UniffiConverterPrimitiveInt(_UniffiConverterPrimitive):
    @classmethod
    def check(cls, value):
        try:
            value = value.__index__()
        except Exception:
            raise TypeError("'{}' object cannot be interpreted as an integer".format(type(value).__name__))
        if not isinstance(value, int):
            raise TypeError("__index__ returned non-int (type {})".format(type(value).__name__))
        if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
            raise ValueError("{} requires {} <= value < {}".format(cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX))
        return super().check(value)

class _UniffiConverterPrimitiveFloat(_UniffiConverterPrimitive):
    @classmethod
    def check(cls, value):
        try:
            value = value.__float__()
        except Exception:
            raise TypeError("must be real number, not {}".format(type(value).__name__))
        if not isinstance(value, float):
            raise TypeError("__float__ returned non-float (type {})".format(type(value).__name__))
        return super().check(value)

# Helper class for wrapper types that will always go through a _UniffiRustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class _UniffiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consume_with_stream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code, and the FFI Function declarations.
# Define some ctypes FFI types that we use in the library

"""
ctypes type for the foreign executor callback.  This is a built-in interface for scheduling
tasks

Args:
  executor: opaque c_size_t value representing the eventloop
  delay: delay in ms
  task: function pointer to the task callback
  task_data: void pointer to the task callback data

Normally we should call task(task_data) after the detail.
However, when task is NULL this indicates that Rust has dropped the ForeignExecutor and we should
decrease the EventLoop refcount.
"""
_UNIFFI_FOREIGN_EXECUTOR_CALLBACK_T = ctypes.CFUNCTYPE(ctypes.c_int8, ctypes.c_size_t, ctypes.c_uint32, ctypes.c_void_p, ctypes.c_void_p)

"""
Function pointer for a Rust task, which a callback function that takes a opaque pointer
"""
_UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p, ctypes.c_int8)

def _uniffi_future_callback_t(return_type):
    """
    Factory function to create callback function types for async functions
    """
    return ctypes.CFUNCTYPE(None, ctypes.c_size_t, return_type, _UniffiRustCallStatus)

def _uniffi_load_indirect():
    """
    This is how we find and load the dynamic library provided by the component.
    For now we just look it up by name.
    """
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    libname = libname.format("bindings")
    path = os.path.join(os.path.dirname(__file__), libname)
    lib = ctypes.cdll.LoadLibrary(path)
    return lib

def _uniffi_check_contract_api_version(lib):
    # Get the bindings contract version from our ComponentInterface
    bindings_contract_version = 24
    # Get the scaffolding contract version by calling the into the dylib
    scaffolding_contract_version = lib.ffi_bindings_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version:
        raise InternalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")

def _uniffi_check_api_checksums(lib):
    if lib.uniffi_bindings_checksum_method_gmod_get_node() != 47725:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bindings_checksum_method_gmod_get_parents() != 12990:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bindings_checksum_method_gmod_root_node() != 62721:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bindings_checksum_method_gmod_traverse() != 12903:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bindings_checksum_method_gmod_try_get_node() != 37985:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bindings_checksum_method_gmod_version() != 8858:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bindings_checksum_method_gmodnode_code() != 49530:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bindings_checksum_method_gmodnode_location() != 46017:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bindings_checksum_method_gmodnode_with_location() != 27185:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bindings_checksum_method_vis_get_gmod() != 60965:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bindings_checksum_method_visversionextensions_to_version_string() != 894:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bindings_checksum_method_visversions_all() != 33735:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bindings_checksum_method_visversions_parse() != 52297:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bindings_checksum_constructor_vis_instance() != 28020:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bindings_checksum_constructor_visversionextensions_new() != 14415:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bindings_checksum_constructor_visversions_new() != 61466:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_bindings_checksum_method_traversalcallback_handler() != 55548:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniffiLib = _uniffi_load_indirect()
_UniffiLib.uniffi_bindings_fn_free_gmod.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bindings_fn_free_gmod.restype = None
_UniffiLib.uniffi_bindings_fn_method_gmod_get_node.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bindings_fn_method_gmod_get_node.restype = ctypes.c_void_p
_UniffiLib.uniffi_bindings_fn_method_gmod_get_parents.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bindings_fn_method_gmod_get_parents.restype = _UniffiRustBuffer
_UniffiLib.uniffi_bindings_fn_method_gmod_root_node.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bindings_fn_method_gmod_root_node.restype = ctypes.c_void_p
_UniffiLib.uniffi_bindings_fn_method_gmod_traverse.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bindings_fn_method_gmod_traverse.restype = ctypes.c_int8
_UniffiLib.uniffi_bindings_fn_method_gmod_try_get_node.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bindings_fn_method_gmod_try_get_node.restype = _UniffiRustBuffer
_UniffiLib.uniffi_bindings_fn_method_gmod_version.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bindings_fn_method_gmod_version.restype = _UniffiRustBuffer
_UniffiLib.uniffi_bindings_fn_free_gmodnode.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bindings_fn_free_gmodnode.restype = None
_UniffiLib.uniffi_bindings_fn_method_gmodnode_code.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bindings_fn_method_gmodnode_code.restype = _UniffiRustBuffer
_UniffiLib.uniffi_bindings_fn_method_gmodnode_location.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bindings_fn_method_gmodnode_location.restype = _UniffiRustBuffer
_UniffiLib.uniffi_bindings_fn_method_gmodnode_with_location.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bindings_fn_method_gmodnode_with_location.restype = ctypes.c_void_p
_UniffiLib.uniffi_bindings_fn_free_vis.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bindings_fn_free_vis.restype = None
_UniffiLib.uniffi_bindings_fn_constructor_vis_instance.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bindings_fn_constructor_vis_instance.restype = ctypes.c_void_p
_UniffiLib.uniffi_bindings_fn_method_vis_get_gmod.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bindings_fn_method_vis_get_gmod.restype = ctypes.c_void_p
_UniffiLib.uniffi_bindings_fn_free_visversionextensions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bindings_fn_free_visversionextensions.restype = None
_UniffiLib.uniffi_bindings_fn_constructor_visversionextensions_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bindings_fn_constructor_visversionextensions_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_bindings_fn_method_visversionextensions_to_version_string.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bindings_fn_method_visversionextensions_to_version_string.restype = _UniffiRustBuffer
_UniffiLib.uniffi_bindings_fn_free_visversions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bindings_fn_free_visversions.restype = None
_UniffiLib.uniffi_bindings_fn_constructor_visversions_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bindings_fn_constructor_visversions_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_bindings_fn_method_visversions_all.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bindings_fn_method_visversions_all.restype = _UniffiRustBuffer
_UniffiLib.uniffi_bindings_fn_method_visversions_parse.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bindings_fn_method_visversions_parse.restype = _UniffiRustBuffer
_UniffiLib.uniffi_bindings_fn_init_callback_traversalcallback.argtypes = (
    _UNIFFI_FOREIGN_CALLBACK_T,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_bindings_fn_init_callback_traversalcallback.restype = None
_UniffiLib.ffi_bindings_rustbuffer_alloc.argtypes = (
    ctypes.c_int32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bindings_rustbuffer_alloc.restype = _UniffiRustBuffer
_UniffiLib.ffi_bindings_rustbuffer_from_bytes.argtypes = (
    _UniffiForeignBytes,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bindings_rustbuffer_from_bytes.restype = _UniffiRustBuffer
_UniffiLib.ffi_bindings_rustbuffer_free.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bindings_rustbuffer_free.restype = None
_UniffiLib.ffi_bindings_rustbuffer_reserve.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_int32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bindings_rustbuffer_reserve.restype = _UniffiRustBuffer
_UniffiLib.ffi_bindings_rust_future_continuation_callback_set.argtypes = (
    _UNIFFI_FUTURE_CONTINUATION_T,
)
_UniffiLib.ffi_bindings_rust_future_continuation_callback_set.restype = None
_UniffiLib.ffi_bindings_rust_future_poll_u8.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_bindings_rust_future_poll_u8.restype = None
_UniffiLib.ffi_bindings_rust_future_cancel_u8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bindings_rust_future_cancel_u8.restype = None
_UniffiLib.ffi_bindings_rust_future_free_u8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bindings_rust_future_free_u8.restype = None
_UniffiLib.ffi_bindings_rust_future_complete_u8.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bindings_rust_future_complete_u8.restype = ctypes.c_uint8
_UniffiLib.ffi_bindings_rust_future_poll_i8.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_bindings_rust_future_poll_i8.restype = None
_UniffiLib.ffi_bindings_rust_future_cancel_i8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bindings_rust_future_cancel_i8.restype = None
_UniffiLib.ffi_bindings_rust_future_free_i8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bindings_rust_future_free_i8.restype = None
_UniffiLib.ffi_bindings_rust_future_complete_i8.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bindings_rust_future_complete_i8.restype = ctypes.c_int8
_UniffiLib.ffi_bindings_rust_future_poll_u16.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_bindings_rust_future_poll_u16.restype = None
_UniffiLib.ffi_bindings_rust_future_cancel_u16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bindings_rust_future_cancel_u16.restype = None
_UniffiLib.ffi_bindings_rust_future_free_u16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bindings_rust_future_free_u16.restype = None
_UniffiLib.ffi_bindings_rust_future_complete_u16.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bindings_rust_future_complete_u16.restype = ctypes.c_uint16
_UniffiLib.ffi_bindings_rust_future_poll_i16.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_bindings_rust_future_poll_i16.restype = None
_UniffiLib.ffi_bindings_rust_future_cancel_i16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bindings_rust_future_cancel_i16.restype = None
_UniffiLib.ffi_bindings_rust_future_free_i16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bindings_rust_future_free_i16.restype = None
_UniffiLib.ffi_bindings_rust_future_complete_i16.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bindings_rust_future_complete_i16.restype = ctypes.c_int16
_UniffiLib.ffi_bindings_rust_future_poll_u32.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_bindings_rust_future_poll_u32.restype = None
_UniffiLib.ffi_bindings_rust_future_cancel_u32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bindings_rust_future_cancel_u32.restype = None
_UniffiLib.ffi_bindings_rust_future_free_u32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bindings_rust_future_free_u32.restype = None
_UniffiLib.ffi_bindings_rust_future_complete_u32.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bindings_rust_future_complete_u32.restype = ctypes.c_uint32
_UniffiLib.ffi_bindings_rust_future_poll_i32.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_bindings_rust_future_poll_i32.restype = None
_UniffiLib.ffi_bindings_rust_future_cancel_i32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bindings_rust_future_cancel_i32.restype = None
_UniffiLib.ffi_bindings_rust_future_free_i32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bindings_rust_future_free_i32.restype = None
_UniffiLib.ffi_bindings_rust_future_complete_i32.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bindings_rust_future_complete_i32.restype = ctypes.c_int32
_UniffiLib.ffi_bindings_rust_future_poll_u64.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_bindings_rust_future_poll_u64.restype = None
_UniffiLib.ffi_bindings_rust_future_cancel_u64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bindings_rust_future_cancel_u64.restype = None
_UniffiLib.ffi_bindings_rust_future_free_u64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bindings_rust_future_free_u64.restype = None
_UniffiLib.ffi_bindings_rust_future_complete_u64.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bindings_rust_future_complete_u64.restype = ctypes.c_uint64
_UniffiLib.ffi_bindings_rust_future_poll_i64.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_bindings_rust_future_poll_i64.restype = None
_UniffiLib.ffi_bindings_rust_future_cancel_i64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bindings_rust_future_cancel_i64.restype = None
_UniffiLib.ffi_bindings_rust_future_free_i64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bindings_rust_future_free_i64.restype = None
_UniffiLib.ffi_bindings_rust_future_complete_i64.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bindings_rust_future_complete_i64.restype = ctypes.c_int64
_UniffiLib.ffi_bindings_rust_future_poll_f32.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_bindings_rust_future_poll_f32.restype = None
_UniffiLib.ffi_bindings_rust_future_cancel_f32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bindings_rust_future_cancel_f32.restype = None
_UniffiLib.ffi_bindings_rust_future_free_f32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bindings_rust_future_free_f32.restype = None
_UniffiLib.ffi_bindings_rust_future_complete_f32.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bindings_rust_future_complete_f32.restype = ctypes.c_float
_UniffiLib.ffi_bindings_rust_future_poll_f64.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_bindings_rust_future_poll_f64.restype = None
_UniffiLib.ffi_bindings_rust_future_cancel_f64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bindings_rust_future_cancel_f64.restype = None
_UniffiLib.ffi_bindings_rust_future_free_f64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bindings_rust_future_free_f64.restype = None
_UniffiLib.ffi_bindings_rust_future_complete_f64.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bindings_rust_future_complete_f64.restype = ctypes.c_double
_UniffiLib.ffi_bindings_rust_future_poll_pointer.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_bindings_rust_future_poll_pointer.restype = None
_UniffiLib.ffi_bindings_rust_future_cancel_pointer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bindings_rust_future_cancel_pointer.restype = None
_UniffiLib.ffi_bindings_rust_future_free_pointer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bindings_rust_future_free_pointer.restype = None
_UniffiLib.ffi_bindings_rust_future_complete_pointer.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bindings_rust_future_complete_pointer.restype = ctypes.c_void_p
_UniffiLib.ffi_bindings_rust_future_poll_rust_buffer.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_bindings_rust_future_poll_rust_buffer.restype = None
_UniffiLib.ffi_bindings_rust_future_cancel_rust_buffer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bindings_rust_future_cancel_rust_buffer.restype = None
_UniffiLib.ffi_bindings_rust_future_free_rust_buffer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bindings_rust_future_free_rust_buffer.restype = None
_UniffiLib.ffi_bindings_rust_future_complete_rust_buffer.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bindings_rust_future_complete_rust_buffer.restype = _UniffiRustBuffer
_UniffiLib.ffi_bindings_rust_future_poll_void.argtypes = (
    ctypes.c_void_p,
    ctypes.c_size_t,
)
_UniffiLib.ffi_bindings_rust_future_poll_void.restype = None
_UniffiLib.ffi_bindings_rust_future_cancel_void.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bindings_rust_future_cancel_void.restype = None
_UniffiLib.ffi_bindings_rust_future_free_void.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_bindings_rust_future_free_void.restype = None
_UniffiLib.ffi_bindings_rust_future_complete_void.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_bindings_rust_future_complete_void.restype = None
_UniffiLib.uniffi_bindings_checksum_method_gmod_get_node.argtypes = (
)
_UniffiLib.uniffi_bindings_checksum_method_gmod_get_node.restype = ctypes.c_uint16
_UniffiLib.uniffi_bindings_checksum_method_gmod_get_parents.argtypes = (
)
_UniffiLib.uniffi_bindings_checksum_method_gmod_get_parents.restype = ctypes.c_uint16
_UniffiLib.uniffi_bindings_checksum_method_gmod_root_node.argtypes = (
)
_UniffiLib.uniffi_bindings_checksum_method_gmod_root_node.restype = ctypes.c_uint16
_UniffiLib.uniffi_bindings_checksum_method_gmod_traverse.argtypes = (
)
_UniffiLib.uniffi_bindings_checksum_method_gmod_traverse.restype = ctypes.c_uint16
_UniffiLib.uniffi_bindings_checksum_method_gmod_try_get_node.argtypes = (
)
_UniffiLib.uniffi_bindings_checksum_method_gmod_try_get_node.restype = ctypes.c_uint16
_UniffiLib.uniffi_bindings_checksum_method_gmod_version.argtypes = (
)
_UniffiLib.uniffi_bindings_checksum_method_gmod_version.restype = ctypes.c_uint16
_UniffiLib.uniffi_bindings_checksum_method_gmodnode_code.argtypes = (
)
_UniffiLib.uniffi_bindings_checksum_method_gmodnode_code.restype = ctypes.c_uint16
_UniffiLib.uniffi_bindings_checksum_method_gmodnode_location.argtypes = (
)
_UniffiLib.uniffi_bindings_checksum_method_gmodnode_location.restype = ctypes.c_uint16
_UniffiLib.uniffi_bindings_checksum_method_gmodnode_with_location.argtypes = (
)
_UniffiLib.uniffi_bindings_checksum_method_gmodnode_with_location.restype = ctypes.c_uint16
_UniffiLib.uniffi_bindings_checksum_method_vis_get_gmod.argtypes = (
)
_UniffiLib.uniffi_bindings_checksum_method_vis_get_gmod.restype = ctypes.c_uint16
_UniffiLib.uniffi_bindings_checksum_method_visversionextensions_to_version_string.argtypes = (
)
_UniffiLib.uniffi_bindings_checksum_method_visversionextensions_to_version_string.restype = ctypes.c_uint16
_UniffiLib.uniffi_bindings_checksum_method_visversions_all.argtypes = (
)
_UniffiLib.uniffi_bindings_checksum_method_visversions_all.restype = ctypes.c_uint16
_UniffiLib.uniffi_bindings_checksum_method_visversions_parse.argtypes = (
)
_UniffiLib.uniffi_bindings_checksum_method_visversions_parse.restype = ctypes.c_uint16
_UniffiLib.uniffi_bindings_checksum_constructor_vis_instance.argtypes = (
)
_UniffiLib.uniffi_bindings_checksum_constructor_vis_instance.restype = ctypes.c_uint16
_UniffiLib.uniffi_bindings_checksum_constructor_visversionextensions_new.argtypes = (
)
_UniffiLib.uniffi_bindings_checksum_constructor_visversionextensions_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_bindings_checksum_constructor_visversions_new.argtypes = (
)
_UniffiLib.uniffi_bindings_checksum_constructor_visversions_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_bindings_checksum_method_traversalcallback_handler.argtypes = (
)
_UniffiLib.uniffi_bindings_checksum_method_traversalcallback_handler.restype = ctypes.c_uint16
_UniffiLib.ffi_bindings_uniffi_contract_version.argtypes = (
)
_UniffiLib.ffi_bindings_uniffi_contract_version.restype = ctypes.c_uint32
_uniffi_check_contract_api_version(_UniffiLib)
_uniffi_check_api_checksums(_UniffiLib)

# Async support

# Public interface members begin here.


class _UniffiConverterBool(_UniffiConverterPrimitive):
    @classmethod
    def check(cls, value):
        return not not value

    @classmethod
    def read(cls, buf):
        return cls.lift(buf.read_u8())

    @classmethod
    def write_unchecked(cls, value, buf):
        buf.write_u8(value)

    @staticmethod
    def lift(value):
        return value != 0

class _UniffiConverterString:
    @staticmethod
    def check(value):
        if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value

    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8_bytes = buf.read(size)
        return utf8_bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        value = _UniffiConverterString.check(value)
        utf8_bytes = value.encode("utf-8")
        buf.write_i32(len(utf8_bytes))
        buf.write(utf8_bytes)

    @staticmethod
    def lift(buf):
        with buf.consume_with_stream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        value = _UniffiConverterString.check(value)
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()



class Gmod:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_bindings_fn_free_gmod, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def get_node(self, code: "str") -> "GmodNode":
        
        return _UniffiConverterTypeGmodNode.lift(
            _rust_call(_UniffiLib.uniffi_bindings_fn_method_gmod_get_node,self._pointer,
        _UniffiConverterString.lower(code))
        )






    def get_parents(self, node: "GmodNode") -> "typing.List[GmodNode]":
        
        return _UniffiConverterSequenceTypeGmodNode.lift(
            _rust_call(_UniffiLib.uniffi_bindings_fn_method_gmod_get_parents,self._pointer,
        _UniffiConverterTypeGmodNode.lower(node))
        )






    def root_node(self, ) -> "GmodNode":
        return _UniffiConverterTypeGmodNode.lift(
            _rust_call(_UniffiLib.uniffi_bindings_fn_method_gmod_root_node,self._pointer,)
        )






    def traverse(self, callback: "TraversalCallback") -> "bool":
        
        return _UniffiConverterBool.lift(
            _rust_call(_UniffiLib.uniffi_bindings_fn_method_gmod_traverse,self._pointer,
        _UniffiConverterCallbackInterfaceTraversalCallback.lower(callback))
        )






    def try_get_node(self, code: "str") -> "typing.Optional[GmodNode]":
        
        return _UniffiConverterOptionalTypeGmodNode.lift(
            _rust_call(_UniffiLib.uniffi_bindings_fn_method_gmod_try_get_node,self._pointer,
        _UniffiConverterString.lower(code))
        )






    def version(self, ) -> "VisVersion":
        return _UniffiConverterTypeVisVersion.lift(
            _rust_call(_UniffiLib.uniffi_bindings_fn_method_gmod_version,self._pointer,)
        )






class _UniffiConverterTypeGmod:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, Gmod):
            raise TypeError("Expected Gmod instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return Gmod._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class GmodNode:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_bindings_fn_free_gmodnode, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def code(self, ) -> "str":
        return _UniffiConverterString.lift(
            _rust_call(_UniffiLib.uniffi_bindings_fn_method_gmodnode_code,self._pointer,)
        )






    def location(self, ) -> "str":
        return _UniffiConverterString.lift(
            _rust_call(_UniffiLib.uniffi_bindings_fn_method_gmodnode_location,self._pointer,)
        )






    def with_location(self, location: "str") -> "GmodNode":
        
        return _UniffiConverterTypeGmodNode.lift(
            _rust_call(_UniffiLib.uniffi_bindings_fn_method_gmodnode_with_location,self._pointer,
        _UniffiConverterString.lower(location))
        )






class _UniffiConverterTypeGmodNode:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, GmodNode):
            raise TypeError("Expected GmodNode instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return GmodNode._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class Vis:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_bindings_fn_free_vis, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def instance(cls, ):
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_bindings_fn_constructor_vis_instance,)
        return cls._make_instance_(pointer)



    def get_gmod(self, version: "VisVersion") -> "Gmod":
        
        return _UniffiConverterTypeGmod.lift(
            _rust_call(_UniffiLib.uniffi_bindings_fn_method_vis_get_gmod,self._pointer,
        _UniffiConverterTypeVisVersion.lower(version))
        )






class _UniffiConverterTypeVis:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, Vis):
            raise TypeError("Expected Vis instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return Vis._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class VisVersionExtensions:
    _pointer: ctypes.c_void_p
    def __init__(self, ):
        self._pointer = _rust_call(_UniffiLib.uniffi_bindings_fn_constructor_visversionextensions_new,)

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_bindings_fn_free_visversionextensions, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def to_version_string(self, version: "VisVersion") -> "str":
        
        return _UniffiConverterString.lift(
            _rust_call(_UniffiLib.uniffi_bindings_fn_method_visversionextensions_to_version_string,self._pointer,
        _UniffiConverterTypeVisVersion.lower(version))
        )






class _UniffiConverterTypeVisVersionExtensions:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, VisVersionExtensions):
            raise TypeError("Expected VisVersionExtensions instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return VisVersionExtensions._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class VisVersions:
    _pointer: ctypes.c_void_p
    def __init__(self, ):
        self._pointer = _rust_call(_UniffiLib.uniffi_bindings_fn_constructor_visversions_new,)

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_bindings_fn_free_visversions, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def all(self, ) -> "typing.List[VisVersion]":
        return _UniffiConverterSequenceTypeVisVersion.lift(
            _rust_call(_UniffiLib.uniffi_bindings_fn_method_visversions_all,self._pointer,)
        )






    def parse(self, input: "str") -> "VisVersion":
        
        return _UniffiConverterTypeVisVersion.lift(
            _rust_call(_UniffiLib.uniffi_bindings_fn_method_visversions_parse,self._pointer,
        _UniffiConverterString.lower(input))
        )






class _UniffiConverterTypeVisVersions:
    @classmethod
    def read(cls, buf):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, VisVersions):
            raise TypeError("Expected VisVersions instance, {} found".format(type(value).__name__))
        buf.write_u64(cls.lower(value))

    @staticmethod
    def lift(value):
        return VisVersions._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer


# TraversalError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class TraversalError(Exception):
    pass

_UniffiTempTraversalError = TraversalError

class TraversalError:  # type: ignore
    class Failed(_UniffiTempTraversalError):
        def __repr__(self):
            return "TraversalError.Failed({})".format(repr(str(self)))
    _UniffiTempTraversalError.Failed = Failed # type: ignore

TraversalError = _UniffiTempTraversalError # type: ignore
del _UniffiTempTraversalError


class _UniffiConverterTypeTraversalError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return TraversalError.Failed(
                _UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def write(value, buf):
        if isinstance(value, TraversalError.Failed):
            buf.write_i32(1)





class TraversalHandlerResult(enum.Enum):
    STOP = 1
    SKIP_SUBTREE = 2
    CONTINUE = 3
    


class _UniffiConverterTypeTraversalHandlerResult(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return TraversalHandlerResult.STOP
        if variant == 2:
            return TraversalHandlerResult.SKIP_SUBTREE
        if variant == 3:
            return TraversalHandlerResult.CONTINUE
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == TraversalHandlerResult.STOP:
            buf.write_i32(1)
        if value == TraversalHandlerResult.SKIP_SUBTREE:
            buf.write_i32(2)
        if value == TraversalHandlerResult.CONTINUE:
            buf.write_i32(3)







class VisVersion(enum.Enum):
    V3_4A = 1
    V3_5A = 2
    V3_6A = 3
    V3_7A = 4
    


class _UniffiConverterTypeVisVersion(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return VisVersion.V3_4A
        if variant == 2:
            return VisVersion.V3_5A
        if variant == 3:
            return VisVersion.V3_6A
        if variant == 4:
            return VisVersion.V3_7A
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == VisVersion.V3_4A:
            buf.write_i32(1)
        if value == VisVersion.V3_5A:
            buf.write_i32(2)
        if value == VisVersion.V3_6A:
            buf.write_i32(3)
        if value == VisVersion.V3_7A:
            buf.write_i32(4)





import threading

class ConcurrentHandleMap:
    """
    A map where inserting, getting and removing data is synchronized with a lock.
    """

    def __init__(self):
        # type Handle = int
        self._left_map = {}  # type: Dict[Handle, Any]
        self._right_map = {}  # type: Dict[Any, Handle]

        self._lock = threading.Lock()
        self._current_handle = 0
        self._stride = 1


    def insert(self, obj):
        with self._lock:
            if obj in self._right_map:
                return self._right_map[obj]
            else:
                handle = self._current_handle
                self._current_handle += self._stride
                self._left_map[handle] = obj
                self._right_map[obj] = handle
                return handle

    def get(self, handle):
        with self._lock:
            return self._left_map.get(handle)

    def remove(self, handle):
        with self._lock:
            if handle in self._left_map:
                obj = self._left_map.pop(handle)
                del self._right_map[obj]
                return obj

# Magic number for the Rust proxy to call using the same mechanism as every other method,
# to free the callback once it's dropped by Rust.
IDX_CALLBACK_FREE = 0
# Return codes for callback calls
_UNIFFI_CALLBACK_SUCCESS = 0
_UNIFFI_CALLBACK_ERROR = 1
_UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

class _UniffiConverterCallbackInterface:
    _handle_map = ConcurrentHandleMap()

    def __init__(self, cb):
        self._foreign_callback = cb

    def drop(self, handle):
        self.__class__._handle_map.remove(handle)

    @classmethod
    def lift(cls, handle):
        obj = cls._handle_map.get(handle)
        if not obj:
            raise InternalError("The object in the handle map has been dropped already")

        return obj

    @classmethod
    def read(cls, buf):
        handle = buf.read_u64()
        cls.lift(handle)

    @classmethod
    def lower(cls, cb):
        handle = cls._handle_map.insert(cb)
        return handle

    @classmethod
    def write(cls, cb, buf):
        buf.write_u64(cls.lower(cb))

# Declaration and _UniffiConverters for TraversalCallback Callback Interface

class TraversalCallback:
    def handler(self, parents: "typing.List[GmodNode]",node: "GmodNode"):
        raise NotImplementedError

    

def py_foreignCallbackCallbackInterfaceTraversalCallback(handle, method, args_data, args_len, buf_ptr):
    
    def invoke_handler(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.handler(
                _UniffiConverterSequenceTypeGmodNode.read(args_stream), 
                _UniffiConverterTypeGmodNode.read(args_stream)
                )

        def makeCallAndHandleReturn():
            rval = makeCall()
            with _UniffiRustBuffer.alloc_with_builder() as builder:
                _UniffiConverterTypeTraversalHandlerResult.write(rval, builder)
                buf_ptr[0] = builder.finalize()
            return _UNIFFI_CALLBACK_SUCCESS
        try:
            return makeCallAndHandleReturn()
        except TraversalError as e:
            # Catch errors declared in the UDL file
            with _UniffiRustBuffer.alloc_with_builder() as builder:
                _UniffiConverterTypeTraversalError.write(e, builder)
                buf_ptr[0] = builder.finalize()
            return _UNIFFI_CALLBACK_ERROR

    

    cb = _UniffiConverterCallbackInterfaceTraversalCallback.lift(handle)
    if not cb:
        raise InternalError("No callback in handlemap; this is a uniffi bug")

    if method == IDX_CALLBACK_FREE:
        _UniffiConverterCallbackInterfaceTraversalCallback.drop(handle)
        # Successfull return
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return _UNIFFI_CALLBACK_SUCCESS

    if method == 1:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_handler(cb, _UniffiRustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = _UniffiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return _UNIFFI_CALLBACK_UNEXPECTED_ERROR
    

    # This should never happen, because an out of bounds method index won't
    # ever be used. Once we can catch errors, we should return an InternalException.
    # https://github.com/mozilla/uniffi-rs/issues/351

    # An unexpected error happened.
    # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
    return _UNIFFI_CALLBACK_UNEXPECTED_ERROR

# We need to keep this function reference alive:
# if they get GC'd while in use then UniFFI internals could attempt to call a function
# that is in freed memory.
# That would be...uh...bad. Yeah, that's the word. Bad.
foreignCallbackCallbackInterfaceTraversalCallback = _UNIFFI_FOREIGN_CALLBACK_T(py_foreignCallbackCallbackInterfaceTraversalCallback)
_rust_call(lambda err: _UniffiLib.uniffi_bindings_fn_init_callback_traversalcallback(foreignCallbackCallbackInterfaceTraversalCallback, err))

# The _UniffiConverter which transforms the Callbacks in to Handles to pass to Rust.
_UniffiConverterCallbackInterfaceTraversalCallback = _UniffiConverterCallbackInterface(foreignCallbackCallbackInterfaceTraversalCallback)



class _UniffiConverterOptionalTypeGmodNode(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeGmodNode.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeGmodNode.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterSequenceTypeGmodNode(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeGmodNode.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeGmodNode.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeVisVersion(_UniffiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeVisVersion.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeVisVersion.read(buf) for i in range(count)
        ]

__all__ = [
    "InternalError",
    "TraversalError",
    "TraversalHandlerResult",
    "VisVersion",
    "Gmod",
    "GmodNode",
    "Vis",
    "VisVersionExtensions",
    "VisVersions",
    "TraversalCallback",
]

