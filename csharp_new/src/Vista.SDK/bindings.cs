// <auto-generated>
//     This file was generated by uniffi-bindgen-cs v0.8.0+v0.25.0
//     See https://github.com/NordSecurity/uniffi-bindgen-cs for more information.
// </auto-generated>

#nullable enable

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;

namespace uniffi.bindings;

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

[StructLayout(LayoutKind.Sequential)]
internal struct RustBuffer
{
    public int capacity;
    public int len;
    public IntPtr data;

    public static RustBuffer Alloc(int size)
    {
        return _UniffiHelpers.RustCall(
            (ref RustCallStatus status) =>
            {
                var buffer = _UniFFILib.ffi_bindings_rustbuffer_alloc(size, ref status);
                if (buffer.data == IntPtr.Zero)
                {
                    throw new AllocationException(
                        $"RustBuffer.Alloc() returned null data pointer (size={size})"
                    );
                }
                return buffer;
            }
        );
    }

    public static void Free(RustBuffer buffer)
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus status) =>
            {
                _UniFFILib.ffi_bindings_rustbuffer_free(buffer, ref status);
            }
        );
    }

    public static BigEndianStream MemoryStream(IntPtr data, int length)
    {
        unsafe
        {
            return new BigEndianStream(new UnmanagedMemoryStream((byte*)data.ToPointer(), length));
        }
    }

    public BigEndianStream AsStream()
    {
        unsafe
        {
            return new BigEndianStream(new UnmanagedMemoryStream((byte*)data.ToPointer(), len));
        }
    }

    public BigEndianStream AsWriteableStream()
    {
        unsafe
        {
            return new BigEndianStream(
                new UnmanagedMemoryStream(
                    (byte*)data.ToPointer(),
                    capacity,
                    capacity,
                    FileAccess.Write
                )
            );
        }
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to managed memory, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

[StructLayout(LayoutKind.Sequential)]
internal struct ForeignBytes
{
    public int length;
    public IntPtr data;
}

// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
internal abstract class FfiConverter<CsType, FfiType>
{
    // Convert an FFI type to a C# type
    public abstract CsType Lift(FfiType value);

    // Convert C# type to an FFI type
    public abstract FfiType Lower(CsType value);

    // Read a C# type from a `ByteBuffer`
    public abstract CsType Read(BigEndianStream stream);

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    public abstract int AllocationSize(CsType value);

    // Write a C# type to a `ByteBuffer`
    public abstract void Write(CsType value, BigEndianStream stream);

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    public RustBuffer LowerIntoRustBuffer(CsType value)
    {
        var rbuf = RustBuffer.Alloc(AllocationSize(value));
        try
        {
            var stream = rbuf.AsWriteableStream();
            Write(value, stream);
            rbuf.len = Convert.ToInt32(stream.Position);
            return rbuf;
        }
        catch
        {
            RustBuffer.Free(rbuf);
            throw;
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    protected CsType LiftFromRustBuffer(RustBuffer rbuf)
    {
        var stream = rbuf.AsStream();
        try
        {
            var item = Read(stream);
            if (stream.HasRemaining())
            {
                throw new InternalException(
                    "junk remaining in buffer after lifting, something is very wrong!!"
                );
            }
            return item;
        }
        finally
        {
            RustBuffer.Free(rbuf);
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
internal abstract class FfiConverterRustBuffer<CsType> : FfiConverter<CsType, RustBuffer>
{
    public override CsType Lift(RustBuffer value)
    {
        return LiftFromRustBuffer(value);
    }

    public override RustBuffer Lower(CsType value)
    {
        return LowerIntoRustBuffer(value);
    }
}

// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
[StructLayout(LayoutKind.Sequential)]
struct RustCallStatus
{
    public sbyte code;
    public RustBuffer error_buf;

    public bool IsSuccess()
    {
        return code == 0;
    }

    public bool IsError()
    {
        return code == 1;
    }

    public bool IsPanic()
    {
        return code == 2;
    }
}

// Base class for all uniffi exceptions
public class UniffiException : Exception
{
    public UniffiException()
        : base() { }

    public UniffiException(string message)
        : base(message) { }
}

public class UndeclaredErrorException : UniffiException
{
    public UndeclaredErrorException(string message)
        : base(message) { }
}

public class PanicException : UniffiException
{
    public PanicException(string message)
        : base(message) { }
}

public class AllocationException : UniffiException
{
    public AllocationException(string message)
        : base(message) { }
}

public class InternalException : UniffiException
{
    public InternalException(string message)
        : base(message) { }
}

public class InvalidEnumException : InternalException
{
    public InvalidEnumException(string message)
        : base(message) { }
}

public class UniffiContractVersionException : UniffiException
{
    public UniffiContractVersionException(string message)
        : base(message) { }
}

public class UniffiContractChecksumException : UniffiException
{
    public UniffiContractChecksumException(string message)
        : base(message) { }
}

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface CallStatusErrorHandler<E>
    where E : Exception
{
    E Lift(RustBuffer error_buf);
}

// CallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
class NullCallStatusErrorHandler : CallStatusErrorHandler<UniffiException>
{
    public static NullCallStatusErrorHandler INSTANCE = new NullCallStatusErrorHandler();

    public UniffiException Lift(RustBuffer error_buf)
    {
        RustBuffer.Free(error_buf);
        return new UndeclaredErrorException(
            "library has returned an error not declared in UNIFFI interface file"
        );
    }
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself
class _UniffiHelpers
{
    public delegate void RustCallAction(ref RustCallStatus status);
    public delegate U RustCallFunc<out U>(ref RustCallStatus status);

    // Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
    public static U RustCallWithError<U, E>(
        CallStatusErrorHandler<E> errorHandler,
        RustCallFunc<U> callback
    )
        where E : UniffiException
    {
        var status = new RustCallStatus();
        var return_value = callback(ref status);
        if (status.IsSuccess())
        {
            return return_value;
        }
        else if (status.IsError())
        {
            throw errorHandler.Lift(status.error_buf);
        }
        else if (status.IsPanic())
        {
            // when the rust code sees a panic, it tries to construct a rustbuffer
            // with the message.  but if that code panics, then it just sends back
            // an empty buffer.
            if (status.error_buf.len > 0)
            {
                throw new PanicException(FfiConverterString.INSTANCE.Lift(status.error_buf));
            }
            else
            {
                throw new PanicException("Rust panic");
            }
        }
        else
        {
            throw new InternalException($"Unknown rust call status: {status.code}");
        }
    }

    // Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
    public static void RustCallWithError<E>(
        CallStatusErrorHandler<E> errorHandler,
        RustCallAction callback
    )
        where E : UniffiException
    {
        _UniffiHelpers.RustCallWithError(
            errorHandler,
            (ref RustCallStatus status) =>
            {
                callback(ref status);
                return 0;
            }
        );
    }

    // Call a rust function that returns a plain value
    public static U RustCall<U>(RustCallFunc<U> callback)
    {
        return _UniffiHelpers.RustCallWithError(NullCallStatusErrorHandler.INSTANCE, callback);
    }

    // Call a rust function that returns a plain value
    public static void RustCall(RustCallAction callback)
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus status) =>
            {
                callback(ref status);
                return 0;
            }
        );
    }
}

// Big endian streams are not yet available in dotnet :'(
// https://github.com/dotnet/runtime/issues/26904

class StreamUnderflowException : Exception
{
    public StreamUnderflowException() { }
}

class BigEndianStream
{
    Stream stream;

    public BigEndianStream(Stream stream)
    {
        this.stream = stream;
    }

    public bool HasRemaining()
    {
        return (stream.Length - stream.Position) > 0;
    }

    public long Position
    {
        get => stream.Position;
        set => stream.Position = value;
    }

    public void WriteBytes(byte[] value)
    {
        stream.Write(value, 0, value.Length);
    }

    public void WriteByte(byte value)
    {
        stream.WriteByte(value);
    }

    public void WriteUShort(ushort value)
    {
        stream.WriteByte((byte)(value >> 8));
        stream.WriteByte((byte)value);
    }

    public void WriteUInt(uint value)
    {
        stream.WriteByte((byte)(value >> 24));
        stream.WriteByte((byte)(value >> 16));
        stream.WriteByte((byte)(value >> 8));
        stream.WriteByte((byte)value);
    }

    public void WriteULong(ulong value)
    {
        WriteUInt((uint)(value >> 32));
        WriteUInt((uint)value);
    }

    public void WriteSByte(sbyte value)
    {
        stream.WriteByte((byte)value);
    }

    public void WriteShort(short value)
    {
        WriteUShort((ushort)value);
    }

    public void WriteInt(int value)
    {
        WriteUInt((uint)value);
    }

    public void WriteFloat(float value)
    {
        unsafe
        {
            WriteInt(*((int*)&value));
        }
    }

    public void WriteLong(long value)
    {
        WriteULong((ulong)value);
    }

    public void WriteDouble(double value)
    {
        WriteLong(BitConverter.DoubleToInt64Bits(value));
    }

    public byte[] ReadBytes(int length)
    {
        CheckRemaining(length);
        byte[] result = new byte[length];
        stream.Read(result, 0, length);
        return result;
    }

    public byte ReadByte()
    {
        CheckRemaining(1);
        return Convert.ToByte(stream.ReadByte());
    }

    public ushort ReadUShort()
    {
        CheckRemaining(2);
        return (ushort)(stream.ReadByte() << 8 | stream.ReadByte());
    }

    public uint ReadUInt()
    {
        CheckRemaining(4);
        return (uint)(
            stream.ReadByte() << 24
            | stream.ReadByte() << 16
            | stream.ReadByte() << 8
            | stream.ReadByte()
        );
    }

    public ulong ReadULong()
    {
        return (ulong)ReadUInt() << 32 | (ulong)ReadUInt();
    }

    public sbyte ReadSByte()
    {
        return (sbyte)ReadByte();
    }

    public short ReadShort()
    {
        return (short)ReadUShort();
    }

    public int ReadInt()
    {
        return (int)ReadUInt();
    }

    public float ReadFloat()
    {
        unsafe
        {
            int value = ReadInt();
            return *((float*)&value);
        }
    }

    public long ReadLong()
    {
        return (long)ReadULong();
    }

    public double ReadDouble()
    {
        return BitConverter.Int64BitsToDouble(ReadLong());
    }

    private void CheckRemaining(int length)
    {
        if (stream.Length - stream.Position < length)
        {
            throw new StreamUnderflowException();
        }
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.


// This is an implementation detail which will be called internally by the public API.
static class _UniFFILib
{
    static _UniFFILib()
    {
        _UniFFILib.uniffiCheckContractApiVersion();
        _UniFFILib.uniffiCheckApiChecksums();

        FfiConverterTypeTraversalCallback.INSTANCE.Register();
    }

    [DllImport("bindings")]
    public static extern void uniffi_bindings_fn_free_gmod(
        IntPtr ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern GmodNodeSafeHandle uniffi_bindings_fn_method_gmod_get_node(
        GmodSafeHandle @ptr,
        RustBuffer @code,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern RustBuffer uniffi_bindings_fn_method_gmod_get_parents(
        GmodSafeHandle @ptr,
        GmodNodeSafeHandle @node,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern GmodNodeSafeHandle uniffi_bindings_fn_method_gmod_root_node(
        GmodSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern sbyte uniffi_bindings_fn_method_gmod_traverse(
        GmodSafeHandle @ptr,
        ulong @callback,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern RustBuffer uniffi_bindings_fn_method_gmod_try_get_node(
        GmodSafeHandle @ptr,
        RustBuffer @code,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern RustBuffer uniffi_bindings_fn_method_gmod_version(
        GmodSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern void uniffi_bindings_fn_free_gmodnode(
        IntPtr ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern RustBuffer uniffi_bindings_fn_method_gmodnode_code(
        GmodNodeSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern RustBuffer uniffi_bindings_fn_method_gmodnode_location(
        GmodNodeSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern GmodNodeSafeHandle uniffi_bindings_fn_method_gmodnode_with_location(
        GmodNodeSafeHandle @ptr,
        RustBuffer @location,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern void uniffi_bindings_fn_free_vis(
        IntPtr ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern VisSafeHandle uniffi_bindings_fn_constructor_vis_instance(
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern GmodSafeHandle uniffi_bindings_fn_method_vis_get_gmod(
        VisSafeHandle @ptr,
        RustBuffer @version,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern void uniffi_bindings_fn_free_visversionextensions(
        IntPtr ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern VisVersionExtensionsSafeHandle uniffi_bindings_fn_constructor_visversionextensions_new(
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern RustBuffer uniffi_bindings_fn_method_visversionextensions_to_version_string(
        VisVersionExtensionsSafeHandle @ptr,
        RustBuffer @version,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern void uniffi_bindings_fn_free_visversions(
        IntPtr ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern VisVersionsSafeHandle uniffi_bindings_fn_constructor_visversions_new(
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern RustBuffer uniffi_bindings_fn_method_visversions_all(
        VisVersionsSafeHandle @ptr,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern RustBuffer uniffi_bindings_fn_method_visversions_parse(
        VisVersionsSafeHandle @ptr,
        RustBuffer @input,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern void uniffi_bindings_fn_init_callback_traversalcallback(
        ForeignCallback @callbackStub,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern RustBuffer ffi_bindings_rustbuffer_alloc(
        int @size,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern RustBuffer ffi_bindings_rustbuffer_from_bytes(
        ForeignBytes @bytes,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern void ffi_bindings_rustbuffer_free(
        RustBuffer @buf,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern RustBuffer ffi_bindings_rustbuffer_reserve(
        RustBuffer @buf,
        int @additional,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_continuation_callback_set(IntPtr @callback);

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_poll_u8(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_cancel_u8(IntPtr @handle);

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_free_u8(IntPtr @handle);

    [DllImport("bindings")]
    public static extern byte ffi_bindings_rust_future_complete_u8(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_poll_i8(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_cancel_i8(IntPtr @handle);

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_free_i8(IntPtr @handle);

    [DllImport("bindings")]
    public static extern sbyte ffi_bindings_rust_future_complete_i8(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_poll_u16(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_cancel_u16(IntPtr @handle);

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_free_u16(IntPtr @handle);

    [DllImport("bindings")]
    public static extern ushort ffi_bindings_rust_future_complete_u16(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_poll_i16(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_cancel_i16(IntPtr @handle);

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_free_i16(IntPtr @handle);

    [DllImport("bindings")]
    public static extern short ffi_bindings_rust_future_complete_i16(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_poll_u32(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_cancel_u32(IntPtr @handle);

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_free_u32(IntPtr @handle);

    [DllImport("bindings")]
    public static extern uint ffi_bindings_rust_future_complete_u32(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_poll_i32(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_cancel_i32(IntPtr @handle);

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_free_i32(IntPtr @handle);

    [DllImport("bindings")]
    public static extern int ffi_bindings_rust_future_complete_i32(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_poll_u64(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_cancel_u64(IntPtr @handle);

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_free_u64(IntPtr @handle);

    [DllImport("bindings")]
    public static extern ulong ffi_bindings_rust_future_complete_u64(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_poll_i64(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_cancel_i64(IntPtr @handle);

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_free_i64(IntPtr @handle);

    [DllImport("bindings")]
    public static extern long ffi_bindings_rust_future_complete_i64(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_poll_f32(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_cancel_f32(IntPtr @handle);

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_free_f32(IntPtr @handle);

    [DllImport("bindings")]
    public static extern float ffi_bindings_rust_future_complete_f32(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_poll_f64(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_cancel_f64(IntPtr @handle);

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_free_f64(IntPtr @handle);

    [DllImport("bindings")]
    public static extern double ffi_bindings_rust_future_complete_f64(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_poll_pointer(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_cancel_pointer(IntPtr @handle);

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_free_pointer(IntPtr @handle);

    [DllImport("bindings")]
    public static extern SafeHandle ffi_bindings_rust_future_complete_pointer(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_poll_rust_buffer(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_cancel_rust_buffer(IntPtr @handle);

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_free_rust_buffer(IntPtr @handle);

    [DllImport("bindings")]
    public static extern RustBuffer ffi_bindings_rust_future_complete_rust_buffer(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_poll_void(
        IntPtr @handle,
        IntPtr @uniffiCallback
    );

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_cancel_void(IntPtr @handle);

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_free_void(IntPtr @handle);

    [DllImport("bindings")]
    public static extern void ffi_bindings_rust_future_complete_void(
        IntPtr @handle,
        ref RustCallStatus _uniffi_out_err
    );

    [DllImport("bindings")]
    public static extern ushort uniffi_bindings_checksum_method_gmod_get_node();

    [DllImport("bindings")]
    public static extern ushort uniffi_bindings_checksum_method_gmod_get_parents();

    [DllImport("bindings")]
    public static extern ushort uniffi_bindings_checksum_method_gmod_root_node();

    [DllImport("bindings")]
    public static extern ushort uniffi_bindings_checksum_method_gmod_traverse();

    [DllImport("bindings")]
    public static extern ushort uniffi_bindings_checksum_method_gmod_try_get_node();

    [DllImport("bindings")]
    public static extern ushort uniffi_bindings_checksum_method_gmod_version();

    [DllImport("bindings")]
    public static extern ushort uniffi_bindings_checksum_method_gmodnode_code();

    [DllImport("bindings")]
    public static extern ushort uniffi_bindings_checksum_method_gmodnode_location();

    [DllImport("bindings")]
    public static extern ushort uniffi_bindings_checksum_method_gmodnode_with_location();

    [DllImport("bindings")]
    public static extern ushort uniffi_bindings_checksum_method_vis_get_gmod();

    [DllImport("bindings")]
    public static extern ushort uniffi_bindings_checksum_method_visversionextensions_to_version_string();

    [DllImport("bindings")]
    public static extern ushort uniffi_bindings_checksum_method_visversions_all();

    [DllImport("bindings")]
    public static extern ushort uniffi_bindings_checksum_method_visversions_parse();

    [DllImport("bindings")]
    public static extern ushort uniffi_bindings_checksum_constructor_vis_instance();

    [DllImport("bindings")]
    public static extern ushort uniffi_bindings_checksum_constructor_visversionextensions_new();

    [DllImport("bindings")]
    public static extern ushort uniffi_bindings_checksum_constructor_visversions_new();

    [DllImport("bindings")]
    public static extern ushort uniffi_bindings_checksum_method_traversalcallback_handler();

    [DllImport("bindings")]
    public static extern uint ffi_bindings_uniffi_contract_version();

    static void uniffiCheckContractApiVersion()
    {
        var scaffolding_contract_version = _UniFFILib.ffi_bindings_uniffi_contract_version();
        if (24 != scaffolding_contract_version)
        {
            throw new UniffiContractVersionException(
                $"uniffi.bindings: uniffi bindings expected version `24`, library returned `{scaffolding_contract_version}`"
            );
        }
    }

    static void uniffiCheckApiChecksums()
    {
        {
            var checksum = _UniFFILib.uniffi_bindings_checksum_method_gmod_get_node();
            if (checksum != 47725)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.bindings: uniffi bindings expected function `uniffi_bindings_checksum_method_gmod_get_node` checksum `47725`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_bindings_checksum_method_gmod_get_parents();
            if (checksum != 12990)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.bindings: uniffi bindings expected function `uniffi_bindings_checksum_method_gmod_get_parents` checksum `12990`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_bindings_checksum_method_gmod_root_node();
            if (checksum != 62721)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.bindings: uniffi bindings expected function `uniffi_bindings_checksum_method_gmod_root_node` checksum `62721`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_bindings_checksum_method_gmod_traverse();
            if (checksum != 12903)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.bindings: uniffi bindings expected function `uniffi_bindings_checksum_method_gmod_traverse` checksum `12903`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_bindings_checksum_method_gmod_try_get_node();
            if (checksum != 37985)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.bindings: uniffi bindings expected function `uniffi_bindings_checksum_method_gmod_try_get_node` checksum `37985`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_bindings_checksum_method_gmod_version();
            if (checksum != 8858)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.bindings: uniffi bindings expected function `uniffi_bindings_checksum_method_gmod_version` checksum `8858`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_bindings_checksum_method_gmodnode_code();
            if (checksum != 49530)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.bindings: uniffi bindings expected function `uniffi_bindings_checksum_method_gmodnode_code` checksum `49530`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_bindings_checksum_method_gmodnode_location();
            if (checksum != 46017)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.bindings: uniffi bindings expected function `uniffi_bindings_checksum_method_gmodnode_location` checksum `46017`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_bindings_checksum_method_gmodnode_with_location();
            if (checksum != 27185)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.bindings: uniffi bindings expected function `uniffi_bindings_checksum_method_gmodnode_with_location` checksum `27185`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_bindings_checksum_method_vis_get_gmod();
            if (checksum != 60965)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.bindings: uniffi bindings expected function `uniffi_bindings_checksum_method_vis_get_gmod` checksum `60965`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_bindings_checksum_method_visversionextensions_to_version_string();
            if (checksum != 894)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.bindings: uniffi bindings expected function `uniffi_bindings_checksum_method_visversionextensions_to_version_string` checksum `894`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_bindings_checksum_method_visversions_all();
            if (checksum != 33735)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.bindings: uniffi bindings expected function `uniffi_bindings_checksum_method_visversions_all` checksum `33735`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_bindings_checksum_method_visversions_parse();
            if (checksum != 52297)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.bindings: uniffi bindings expected function `uniffi_bindings_checksum_method_visversions_parse` checksum `52297`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_bindings_checksum_constructor_vis_instance();
            if (checksum != 28020)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.bindings: uniffi bindings expected function `uniffi_bindings_checksum_constructor_vis_instance` checksum `28020`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum =
                _UniFFILib.uniffi_bindings_checksum_constructor_visversionextensions_new();
            if (checksum != 14415)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.bindings: uniffi bindings expected function `uniffi_bindings_checksum_constructor_visversionextensions_new` checksum `14415`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_bindings_checksum_constructor_visversions_new();
            if (checksum != 61466)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.bindings: uniffi bindings expected function `uniffi_bindings_checksum_constructor_visversions_new` checksum `61466`, library returned `{checksum}`"
                );
            }
        }
        {
            var checksum = _UniFFILib.uniffi_bindings_checksum_method_traversalcallback_handler();
            if (checksum != 55548)
            {
                throw new UniffiContractChecksumException(
                    $"uniffi.bindings: uniffi bindings expected function `uniffi_bindings_checksum_method_traversalcallback_handler` checksum `55548`, library returned `{checksum}`"
                );
            }
        }
    }
}

// Public interface members begin here.

#pragma warning disable 8625




class FfiConverterBoolean : FfiConverter<bool, sbyte>
{
    public static FfiConverterBoolean INSTANCE = new FfiConverterBoolean();

    public override bool Lift(sbyte value)
    {
        return value != 0;
    }

    public override bool Read(BigEndianStream stream)
    {
        return Lift(stream.ReadSByte());
    }

    public override sbyte Lower(bool value)
    {
        return value ? (sbyte)1 : (sbyte)0;
    }

    public override int AllocationSize(bool value)
    {
        return (sbyte)1;
    }

    public override void Write(bool value, BigEndianStream stream)
    {
        stream.WriteSByte(Lower(value));
    }
}

class FfiConverterString : FfiConverter<string, RustBuffer>
{
    public static FfiConverterString INSTANCE = new FfiConverterString();

    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    public override string Lift(RustBuffer value)
    {
        try
        {
            var bytes = value.AsStream().ReadBytes(value.len);
            return System.Text.Encoding.UTF8.GetString(bytes);
        }
        finally
        {
            RustBuffer.Free(value);
        }
    }

    public override string Read(BigEndianStream stream)
    {
        var length = stream.ReadInt();
        var bytes = stream.ReadBytes(length);
        return System.Text.Encoding.UTF8.GetString(bytes);
    }

    public override RustBuffer Lower(string value)
    {
        var bytes = System.Text.Encoding.UTF8.GetBytes(value);
        var rbuf = RustBuffer.Alloc(bytes.Length);
        rbuf.AsWriteableStream().WriteBytes(bytes);
        return rbuf;
    }

    // TODO(CS)
    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per unicode codepoint which will always be
    // enough.
    public override int AllocationSize(string value)
    {
        const int sizeForLength = 4;
        var sizeForString = value.Length * 3;
        return sizeForLength + sizeForString;
    }

    public override void Write(string value, BigEndianStream stream)
    {
        var bytes = System.Text.Encoding.UTF8.GetBytes(value);
        stream.WriteInt(bytes.Length);
        stream.WriteBytes(bytes);
    }
}

// `SafeHandle` implements the semantics outlined below, i.e. its thread safe, and the dispose
// method will only be called once, once all outstanding native calls have completed.
// https://github.com/mozilla/uniffi-rs/blob/0dc031132d9493ca812c3af6e7dd60ad2ea95bf0/uniffi_bindgen/src/bindings/kotlin/templates/ObjectRuntime.kt#L31
// https://learn.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.criticalhandle

public abstract class FFIObject<THandle> : IDisposable
    where THandle : FFISafeHandle
{
    private THandle handle;

    public FFIObject(THandle handle)
    {
        this.handle = handle;
    }

    public THandle GetHandle()
    {
        return handle;
    }

    public void Dispose()
    {
        handle.Dispose();
    }
}

public abstract class FFISafeHandle : SafeHandle
{
    public FFISafeHandle()
        : base(new IntPtr(0), true) { }

    public FFISafeHandle(IntPtr pointer)
        : this()
    {
        this.SetHandle(pointer);
    }

    public override bool IsInvalid
    {
        get { return handle.ToInt64() == 0; }
    }

    // TODO(CS) this completely breaks any guarantees offered by SafeHandle.. Extracting
    // raw value from SafeHandle puts responsiblity on the consumer of this function to
    // ensure that SafeHandle outlives the stream, and anyone who might have read the raw
    // value from the stream and are holding onto it. Otherwise, the result might be a use
    // after free, or free while method calls are still in flight.
    //
    // This is also relevant for Kotlin.
    //
    public IntPtr DangerousGetRawFfiValue()
    {
        return handle;
    }
}

static class FFIObjectUtil
{
    public static void DisposeAll(params Object?[] list)
    {
        foreach (var obj in list)
        {
            Dispose(obj);
        }
    }

    // Dispose is implemented by recursive type inspection at runtime. This is because
    // generating correct Dispose calls for recursive complex types, e.g. List<List<int>>
    // is quite cumbersome.
    private static void Dispose(dynamic? obj)
    {
        if (obj == null)
        {
            return;
        }

        if (obj is IDisposable disposable)
        {
            disposable.Dispose();
            return;
        }

        var type = obj.GetType();
        if (type != null)
        {
            if (type.IsGenericType)
            {
                if (type.GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>)))
                {
                    foreach (var value in obj)
                    {
                        Dispose(value);
                    }
                }
                else if (type.GetGenericTypeDefinition().IsAssignableFrom(typeof(Dictionary<,>)))
                {
                    foreach (var value in obj.Values)
                    {
                        Dispose(value);
                    }
                }
            }
        }
    }
}

public interface IGmod
{
    GmodNode GetNode(String @code);

    List<GmodNode> GetParents(GmodNode @node);

    GmodNode RootNode();

    bool Traverse(TraversalCallback @callback);

    GmodNode? TryGetNode(String @code);

    VisVersion Version();
}

public class GmodSafeHandle : FFISafeHandle
{
    public GmodSafeHandle()
        : base() { }

    public GmodSafeHandle(IntPtr pointer)
        : base(pointer) { }

    protected override bool ReleaseHandle()
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus status) =>
            {
                _UniFFILib.uniffi_bindings_fn_free_gmod(this.handle, ref status);
            }
        );
        return true;
    }
}

public class Gmod : FFIObject<GmodSafeHandle>, IGmod
{
    public Gmod(GmodSafeHandle pointer)
        : base(pointer) { }

    public GmodNode GetNode(String @code)
    {
        return FfiConverterTypeGmodNode.INSTANCE.Lift(
            _UniffiHelpers.RustCall(
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_bindings_fn_method_gmod_get_node(
                        this.GetHandle(),
                        FfiConverterString.INSTANCE.Lower(@code),
                        ref _status
                    )
            )
        );
    }

    public List<GmodNode> GetParents(GmodNode @node)
    {
        return FfiConverterSequenceTypeGmodNode.INSTANCE.Lift(
            _UniffiHelpers.RustCall(
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_bindings_fn_method_gmod_get_parents(
                        this.GetHandle(),
                        FfiConverterTypeGmodNode.INSTANCE.Lower(@node),
                        ref _status
                    )
            )
        );
    }

    public GmodNode RootNode()
    {
        return FfiConverterTypeGmodNode.INSTANCE.Lift(
            _UniffiHelpers.RustCall(
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_bindings_fn_method_gmod_root_node(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    public bool Traverse(TraversalCallback @callback)
    {
        return FfiConverterBoolean.INSTANCE.Lift(
            _UniffiHelpers.RustCall(
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_bindings_fn_method_gmod_traverse(
                        this.GetHandle(),
                        FfiConverterTypeTraversalCallback.INSTANCE.Lower(@callback),
                        ref _status
                    )
            )
        );
    }

    public GmodNode? TryGetNode(String @code)
    {
        return FfiConverterOptionalTypeGmodNode.INSTANCE.Lift(
            _UniffiHelpers.RustCall(
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_bindings_fn_method_gmod_try_get_node(
                        this.GetHandle(),
                        FfiConverterString.INSTANCE.Lower(@code),
                        ref _status
                    )
            )
        );
    }

    public VisVersion Version()
    {
        return FfiConverterTypeVisVersion.INSTANCE.Lift(
            _UniffiHelpers.RustCall(
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_bindings_fn_method_gmod_version(this.GetHandle(), ref _status)
            )
        );
    }
}

class FfiConverterTypeGmod : FfiConverter<Gmod, GmodSafeHandle>
{
    public static FfiConverterTypeGmod INSTANCE = new FfiConverterTypeGmod();

    public override GmodSafeHandle Lower(Gmod value)
    {
        return value.GetHandle();
    }

    public override Gmod Lift(GmodSafeHandle value)
    {
        return new Gmod(value);
    }

    public override Gmod Read(BigEndianStream stream)
    {
        return Lift(new GmodSafeHandle(new IntPtr(stream.ReadLong())));
    }

    public override int AllocationSize(Gmod value)
    {
        return 8;
    }

    public override void Write(Gmod value, BigEndianStream stream)
    {
        stream.WriteLong(Lower(value).DangerousGetRawFfiValue().ToInt64());
    }
}

public interface IGmodNode
{
    String Code();

    String Location();

    GmodNode WithLocation(String @location);
}

public class GmodNodeSafeHandle : FFISafeHandle
{
    public GmodNodeSafeHandle()
        : base() { }

    public GmodNodeSafeHandle(IntPtr pointer)
        : base(pointer) { }

    protected override bool ReleaseHandle()
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus status) =>
            {
                _UniFFILib.uniffi_bindings_fn_free_gmodnode(this.handle, ref status);
            }
        );
        return true;
    }
}

public class GmodNode : FFIObject<GmodNodeSafeHandle>, IGmodNode
{
    public GmodNode(GmodNodeSafeHandle pointer)
        : base(pointer) { }

    public String Code()
    {
        return FfiConverterString.INSTANCE.Lift(
            _UniffiHelpers.RustCall(
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_bindings_fn_method_gmodnode_code(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    public String Location()
    {
        return FfiConverterString.INSTANCE.Lift(
            _UniffiHelpers.RustCall(
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_bindings_fn_method_gmodnode_location(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    public GmodNode WithLocation(String @location)
    {
        return FfiConverterTypeGmodNode.INSTANCE.Lift(
            _UniffiHelpers.RustCall(
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_bindings_fn_method_gmodnode_with_location(
                        this.GetHandle(),
                        FfiConverterString.INSTANCE.Lower(@location),
                        ref _status
                    )
            )
        );
    }
}

class FfiConverterTypeGmodNode : FfiConverter<GmodNode, GmodNodeSafeHandle>
{
    public static FfiConverterTypeGmodNode INSTANCE = new FfiConverterTypeGmodNode();

    public override GmodNodeSafeHandle Lower(GmodNode value)
    {
        return value.GetHandle();
    }

    public override GmodNode Lift(GmodNodeSafeHandle value)
    {
        return new GmodNode(value);
    }

    public override GmodNode Read(BigEndianStream stream)
    {
        return Lift(new GmodNodeSafeHandle(new IntPtr(stream.ReadLong())));
    }

    public override int AllocationSize(GmodNode value)
    {
        return 8;
    }

    public override void Write(GmodNode value, BigEndianStream stream)
    {
        stream.WriteLong(Lower(value).DangerousGetRawFfiValue().ToInt64());
    }
}

public interface IVis
{
    Gmod GetGmod(VisVersion @version);
}

public class VisSafeHandle : FFISafeHandle
{
    public VisSafeHandle()
        : base() { }

    public VisSafeHandle(IntPtr pointer)
        : base(pointer) { }

    protected override bool ReleaseHandle()
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus status) =>
            {
                _UniFFILib.uniffi_bindings_fn_free_vis(this.handle, ref status);
            }
        );
        return true;
    }
}

public class Vis : FFIObject<VisSafeHandle>, IVis
{
    public Vis(VisSafeHandle pointer)
        : base(pointer) { }

    public Gmod GetGmod(VisVersion @version)
    {
        return FfiConverterTypeGmod.INSTANCE.Lift(
            _UniffiHelpers.RustCall(
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_bindings_fn_method_vis_get_gmod(
                        this.GetHandle(),
                        FfiConverterTypeVisVersion.INSTANCE.Lower(@version),
                        ref _status
                    )
            )
        );
    }

    public static Vis Instance()
    {
        return new Vis(
            _UniffiHelpers.RustCall(
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_bindings_fn_constructor_vis_instance(ref _status)
            )
        );
    }
}

class FfiConverterTypeVis : FfiConverter<Vis, VisSafeHandle>
{
    public static FfiConverterTypeVis INSTANCE = new FfiConverterTypeVis();

    public override VisSafeHandle Lower(Vis value)
    {
        return value.GetHandle();
    }

    public override Vis Lift(VisSafeHandle value)
    {
        return new Vis(value);
    }

    public override Vis Read(BigEndianStream stream)
    {
        return Lift(new VisSafeHandle(new IntPtr(stream.ReadLong())));
    }

    public override int AllocationSize(Vis value)
    {
        return 8;
    }

    public override void Write(Vis value, BigEndianStream stream)
    {
        stream.WriteLong(Lower(value).DangerousGetRawFfiValue().ToInt64());
    }
}

public interface IVisVersionExtensions
{
    String ToVersionString(VisVersion @version);
}

public class VisVersionExtensionsSafeHandle : FFISafeHandle
{
    public VisVersionExtensionsSafeHandle()
        : base() { }

    public VisVersionExtensionsSafeHandle(IntPtr pointer)
        : base(pointer) { }

    protected override bool ReleaseHandle()
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus status) =>
            {
                _UniFFILib.uniffi_bindings_fn_free_visversionextensions(this.handle, ref status);
            }
        );
        return true;
    }
}

public class VisVersionExtensions : FFIObject<VisVersionExtensionsSafeHandle>, IVisVersionExtensions
{
    public VisVersionExtensions(VisVersionExtensionsSafeHandle pointer)
        : base(pointer) { }

    public VisVersionExtensions()
        : this(
            _UniffiHelpers.RustCall(
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_bindings_fn_constructor_visversionextensions_new(ref _status)
            )
        ) { }

    public String ToVersionString(VisVersion @version)
    {
        return FfiConverterString.INSTANCE.Lift(
            _UniffiHelpers.RustCall(
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_bindings_fn_method_visversionextensions_to_version_string(
                        this.GetHandle(),
                        FfiConverterTypeVisVersion.INSTANCE.Lower(@version),
                        ref _status
                    )
            )
        );
    }
}

class FfiConverterTypeVisVersionExtensions
    : FfiConverter<VisVersionExtensions, VisVersionExtensionsSafeHandle>
{
    public static FfiConverterTypeVisVersionExtensions INSTANCE =
        new FfiConverterTypeVisVersionExtensions();

    public override VisVersionExtensionsSafeHandle Lower(VisVersionExtensions value)
    {
        return value.GetHandle();
    }

    public override VisVersionExtensions Lift(VisVersionExtensionsSafeHandle value)
    {
        return new VisVersionExtensions(value);
    }

    public override VisVersionExtensions Read(BigEndianStream stream)
    {
        return Lift(new VisVersionExtensionsSafeHandle(new IntPtr(stream.ReadLong())));
    }

    public override int AllocationSize(VisVersionExtensions value)
    {
        return 8;
    }

    public override void Write(VisVersionExtensions value, BigEndianStream stream)
    {
        stream.WriteLong(Lower(value).DangerousGetRawFfiValue().ToInt64());
    }
}

public interface IVisVersions
{
    List<VisVersion> All();

    VisVersion Parse(String @input);
}

public class VisVersionsSafeHandle : FFISafeHandle
{
    public VisVersionsSafeHandle()
        : base() { }

    public VisVersionsSafeHandle(IntPtr pointer)
        : base(pointer) { }

    protected override bool ReleaseHandle()
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus status) =>
            {
                _UniFFILib.uniffi_bindings_fn_free_visversions(this.handle, ref status);
            }
        );
        return true;
    }
}

public class VisVersions : FFIObject<VisVersionsSafeHandle>, IVisVersions
{
    public VisVersions(VisVersionsSafeHandle pointer)
        : base(pointer) { }

    public VisVersions()
        : this(
            _UniffiHelpers.RustCall(
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_bindings_fn_constructor_visversions_new(ref _status)
            )
        ) { }

    public List<VisVersion> All()
    {
        return FfiConverterSequenceTypeVisVersion.INSTANCE.Lift(
            _UniffiHelpers.RustCall(
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_bindings_fn_method_visversions_all(
                        this.GetHandle(),
                        ref _status
                    )
            )
        );
    }

    public VisVersion Parse(String @input)
    {
        return FfiConverterTypeVisVersion.INSTANCE.Lift(
            _UniffiHelpers.RustCall(
                (ref RustCallStatus _status) =>
                    _UniFFILib.uniffi_bindings_fn_method_visversions_parse(
                        this.GetHandle(),
                        FfiConverterString.INSTANCE.Lower(@input),
                        ref _status
                    )
            )
        );
    }
}

class FfiConverterTypeVisVersions : FfiConverter<VisVersions, VisVersionsSafeHandle>
{
    public static FfiConverterTypeVisVersions INSTANCE = new FfiConverterTypeVisVersions();

    public override VisVersionsSafeHandle Lower(VisVersions value)
    {
        return value.GetHandle();
    }

    public override VisVersions Lift(VisVersionsSafeHandle value)
    {
        return new VisVersions(value);
    }

    public override VisVersions Read(BigEndianStream stream)
    {
        return Lift(new VisVersionsSafeHandle(new IntPtr(stream.ReadLong())));
    }

    public override int AllocationSize(VisVersions value)
    {
        return 8;
    }

    public override void Write(VisVersions value, BigEndianStream stream)
    {
        stream.WriteLong(Lower(value).DangerousGetRawFfiValue().ToInt64());
    }
}

public class TraversalException : UniffiException
{
    TraversalException(string message)
        : base(message) { }

    // Each variant is a nested class
    // Flat enums carries a string error message, so no special implementation is necessary.

    public class Failed : TraversalException
    {
        public Failed(string message)
            : base(message) { }
    }
}

class FfiConverterTypeTraversalException
    : FfiConverterRustBuffer<TraversalException>,
        CallStatusErrorHandler<TraversalException>
{
    public static FfiConverterTypeTraversalException INSTANCE =
        new FfiConverterTypeTraversalException();

    public override TraversalException Read(BigEndianStream stream)
    {
        var value = stream.ReadInt();
        switch (value)
        {
            case 1:
                return new TraversalException.Failed(FfiConverterString.INSTANCE.Read(stream));
            default:
                throw new InternalException(
                    String.Format(
                        "invalid error value '{0}' in FfiConverterTypeTraversalException.Read()",
                        value
                    )
                );
        }
    }

    public override int AllocationSize(TraversalException value)
    {
        return 4 + FfiConverterString.INSTANCE.AllocationSize(value.Message);
    }

    public override void Write(TraversalException value, BigEndianStream stream)
    {
        switch (value)
        {
            case TraversalException.Failed:
                stream.WriteInt(1);
                break;
            default:
                throw new InternalException(
                    String.Format(
                        "invalid error value '{0}' in FfiConverterTypeTraversalException.Write()",
                        value
                    )
                );
        }
    }
}

public enum TraversalHandlerResult : int
{
    Stop,
    SkipSubtree,
    Continue
}

class FfiConverterTypeTraversalHandlerResult : FfiConverterRustBuffer<TraversalHandlerResult>
{
    public static FfiConverterTypeTraversalHandlerResult INSTANCE =
        new FfiConverterTypeTraversalHandlerResult();

    public override TraversalHandlerResult Read(BigEndianStream stream)
    {
        var value = stream.ReadInt() - 1;
        if (Enum.IsDefined(typeof(TraversalHandlerResult), value))
        {
            return (TraversalHandlerResult)value;
        }
        else
        {
            throw new InternalException(
                String.Format(
                    "invalid enum value '{0}' in FfiConverterTypeTraversalHandlerResult.Read()",
                    value
                )
            );
        }
    }

    public override int AllocationSize(TraversalHandlerResult value)
    {
        return 4;
    }

    public override void Write(TraversalHandlerResult value, BigEndianStream stream)
    {
        stream.WriteInt((int)value + 1);
    }
}

public enum VisVersion : int
{
    V34a,
    V35a,
    V36a,
    V37a
}

class FfiConverterTypeVisVersion : FfiConverterRustBuffer<VisVersion>
{
    public static FfiConverterTypeVisVersion INSTANCE = new FfiConverterTypeVisVersion();

    public override VisVersion Read(BigEndianStream stream)
    {
        var value = stream.ReadInt() - 1;
        if (Enum.IsDefined(typeof(VisVersion), value))
        {
            return (VisVersion)value;
        }
        else
        {
            throw new InternalException(
                String.Format(
                    "invalid enum value '{0}' in FfiConverterTypeVisVersion.Read()",
                    value
                )
            );
        }
    }

    public override int AllocationSize(VisVersion value)
    {
        return 4;
    }

    public override void Write(VisVersion value, BigEndianStream stream)
    {
        stream.WriteInt((int)value + 1);
    }
}

static class UniffiCallbackResponseCode
{
    public static int SUCCESS = 0;
    public static int ERROR = 1;
    public static int UNEXPECTED_ERROR = 2;
}

class ConcurrentHandleMap<T>
    where T : notnull
{
    Dictionary<ulong, T> leftMap = new Dictionary<ulong, T>();
    Dictionary<T, ulong> rightMap = new Dictionary<T, ulong>();

    Object lock_ = new Object();
    ulong currentHandle = 0;

    public ulong Insert(T obj)
    {
        lock (lock_)
        {
            ulong existingHandle = 0;
            if (rightMap.TryGetValue(obj, out existingHandle))
            {
                return existingHandle;
            }
            currentHandle += 1;
            leftMap[currentHandle] = obj;
            rightMap[obj] = currentHandle;
            return currentHandle;
        }
    }

    public bool TryGet(ulong handle, out T result)
    {
        // Possible null reference assignment
#pragma warning disable 8601
        return leftMap.TryGetValue(handle, out result);
#pragma warning restore 8601
    }

    public bool Remove(ulong handle)
    {
        return Remove(handle, out T result);
    }

    public bool Remove(ulong handle, out T result)
    {
        lock (lock_)
        {
            // Possible null reference assignment
#pragma warning disable 8601
            if (leftMap.TryGetValue(handle, out result))
            {
#pragma warning restore 8601
                leftMap.Remove(handle);
                rightMap.Remove(result);
                return true;
            }
            else
            {
                return false;
            }
        }
    }
}

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
internal delegate int ForeignCallback(
    ulong handle,
    uint method,
    IntPtr argsData,
    int argsLength,
    ref RustBuffer outBuf
);

internal abstract class FfiConverterCallbackInterface<CallbackInterface>
    : FfiConverter<CallbackInterface, ulong>
    where CallbackInterface : notnull
{
    ConcurrentHandleMap<CallbackInterface> handleMap = new ConcurrentHandleMap<CallbackInterface>();

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    public abstract void Register();

    public RustBuffer Drop(ulong handle)
    {
        handleMap.Remove(handle);
        return new RustBuffer();
    }

    public override CallbackInterface Lift(ulong handle)
    {
        if (!handleMap.TryGet(handle, out CallbackInterface result))
        {
            throw new InternalException($"No callback in handlemap '{handle}'");
        }
        return result;
    }

    public override CallbackInterface Read(BigEndianStream stream)
    {
        return Lift(stream.ReadULong());
    }

    public override ulong Lower(CallbackInterface value)
    {
        return handleMap.Insert(value);
    }

    public override int AllocationSize(CallbackInterface value)
    {
        return 8;
    }

    public override void Write(CallbackInterface value, BigEndianStream stream)
    {
        stream.WriteULong(Lower(value));
    }
}

public interface TraversalCallback
{
    /// <exception cref="TraversalException"></exception>
    TraversalHandlerResult Handler(List<GmodNode> @parents, GmodNode @node);
}

// The ForeignCallback that is passed to Rust.
class ForeignCallbackTypeTraversalCallback
{
    // This cannot be a static method. Although C# supports implicitly using a static method as a
    // delegate, the behaviour is incorrect for this use case. Using static method as a delegate
    // argument creates an implicit delegate object, that is later going to be collected by GC. Any
    // attempt to invoke a garbage collected delegate results in an error:
    //   > A callback was made on a garbage collected delegate of type 'ForeignCallback::..'
    public static ForeignCallback INSTANCE = (
        ulong handle,
        uint method,
        IntPtr argsData,
        int argsLength,
        ref RustBuffer outBuf
    ) =>
    {
        var cb = FfiConverterTypeTraversalCallback.INSTANCE.Lift(handle);
        switch (method)
        {
            case 0:
            {
                // 0 means Rust is done with the callback, and the callback
                // can be dropped by the foreign language.
                FfiConverterTypeTraversalCallback.INSTANCE.Drop(handle);
                // No return value.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                return 0;
            }

            case 1:
            {
                try
                {
                    try
                    {
                        outBuf = InvokeHandler(cb, RustBuffer.MemoryStream(argsData, argsLength));
                        return UniffiCallbackResponseCode.SUCCESS;
                    }
                    catch (TraversalException e)
                    {
                        outBuf = FfiConverterTypeTraversalException.INSTANCE.Lower(e);
                        return UniffiCallbackResponseCode.ERROR;
                    }
                }
                catch (Exception e)
                {
                    // Unexpected error
                    try
                    {
                        // Try to serialize the error into a string
                        outBuf = FfiConverterString.INSTANCE.Lower(e.Message);
                    }
                    catch
                    {
                        // If that fails, then it's time to give up and just return
                    }
                    return UniffiCallbackResponseCode.UNEXPECTED_ERROR;
                }
            }

            default:
            {
                // This should never happen, because an out of bounds method index won't
                // ever be used. Once we can catch errors, we should return an InternalException.
                // https://github.com/mozilla/uniffi-rs/issues/351
                return UniffiCallbackResponseCode.UNEXPECTED_ERROR;
            }
        }
    };

    static RustBuffer InvokeHandler(TraversalCallback callback, BigEndianStream stream)
    {
        var result = callback.Handler(
            FfiConverterSequenceTypeGmodNode.INSTANCE.Read(stream),
            FfiConverterTypeGmodNode.INSTANCE.Read(stream)
        );
        return FfiConverterTypeTraversalHandlerResult.INSTANCE.LowerIntoRustBuffer(result);
    }
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
class FfiConverterTypeTraversalCallback : FfiConverterCallbackInterface<TraversalCallback>
{
    public static FfiConverterTypeTraversalCallback INSTANCE =
        new FfiConverterTypeTraversalCallback();

    public override void Register()
    {
        _UniffiHelpers.RustCall(
            (ref RustCallStatus status) =>
            {
                _UniFFILib.uniffi_bindings_fn_init_callback_traversalcallback(
                    ForeignCallbackTypeTraversalCallback.INSTANCE,
                    ref status
                );
            }
        );
    }
}

class FfiConverterOptionalTypeGmodNode : FfiConverterRustBuffer<GmodNode?>
{
    public static FfiConverterOptionalTypeGmodNode INSTANCE =
        new FfiConverterOptionalTypeGmodNode();

    public override GmodNode? Read(BigEndianStream stream)
    {
        if (stream.ReadByte() == 0)
        {
            return null;
        }
        return FfiConverterTypeGmodNode.INSTANCE.Read(stream);
    }

    public override int AllocationSize(GmodNode? value)
    {
        if (value == null)
        {
            return 1;
        }
        else
        {
            return 1 + FfiConverterTypeGmodNode.INSTANCE.AllocationSize((GmodNode)value);
        }
    }

    public override void Write(GmodNode? value, BigEndianStream stream)
    {
        if (value == null)
        {
            stream.WriteByte(0);
        }
        else
        {
            stream.WriteByte(1);
            FfiConverterTypeGmodNode.INSTANCE.Write((GmodNode)value, stream);
        }
    }
}

class FfiConverterSequenceTypeGmodNode : FfiConverterRustBuffer<List<GmodNode>>
{
    public static FfiConverterSequenceTypeGmodNode INSTANCE =
        new FfiConverterSequenceTypeGmodNode();

    public override List<GmodNode> Read(BigEndianStream stream)
    {
        var length = stream.ReadInt();
        var result = new List<GmodNode>(length);
        for (int i = 0; i < length; i++)
        {
            result.Add(FfiConverterTypeGmodNode.INSTANCE.Read(stream));
        }
        return result;
    }

    public override int AllocationSize(List<GmodNode> value)
    {
        var sizeForLength = 4;

        // details/1-empty-list-as-default-method-parameter.md
        if (value == null)
        {
            return sizeForLength;
        }

        var sizeForItems = value
            .Select(item => FfiConverterTypeGmodNode.INSTANCE.AllocationSize(item))
            .Sum();
        return sizeForLength + sizeForItems;
    }

    public override void Write(List<GmodNode> value, BigEndianStream stream)
    {
        // details/1-empty-list-as-default-method-parameter.md
        if (value == null)
        {
            stream.WriteInt(0);
            return;
        }

        stream.WriteInt(value.Count);
        value.ForEach(item => FfiConverterTypeGmodNode.INSTANCE.Write(item, stream));
    }
}

class FfiConverterSequenceTypeVisVersion : FfiConverterRustBuffer<List<VisVersion>>
{
    public static FfiConverterSequenceTypeVisVersion INSTANCE =
        new FfiConverterSequenceTypeVisVersion();

    public override List<VisVersion> Read(BigEndianStream stream)
    {
        var length = stream.ReadInt();
        var result = new List<VisVersion>(length);
        for (int i = 0; i < length; i++)
        {
            result.Add(FfiConverterTypeVisVersion.INSTANCE.Read(stream));
        }
        return result;
    }

    public override int AllocationSize(List<VisVersion> value)
    {
        var sizeForLength = 4;

        // details/1-empty-list-as-default-method-parameter.md
        if (value == null)
        {
            return sizeForLength;
        }

        var sizeForItems = value
            .Select(item => FfiConverterTypeVisVersion.INSTANCE.AllocationSize(item))
            .Sum();
        return sizeForLength + sizeForItems;
    }

    public override void Write(List<VisVersion> value, BigEndianStream stream)
    {
        // details/1-empty-list-as-default-method-parameter.md
        if (value == null)
        {
            stream.WriteInt(0);
            return;
        }

        stream.WriteInt(value.Count);
        value.ForEach(item => FfiConverterTypeVisVersion.INSTANCE.Write(item, stream));
    }
}
#pragma warning restore 8625
public static class BindingsMethods { }
